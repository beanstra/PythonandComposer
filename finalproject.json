{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
	"parameters": {
		"newStorageAccountName": {
			"type": "String",
			"metadata": {
				"description": "Unique DNS Name for the Storage Account where the Virtual Machine's disks will be placed."
			}
		},
		"adminUsername": {
			"type": "string",
			"metadata": {
				"description": "Username for the Virtual Machine."
			}
		},
		"VSTSAccountName": {
			"type": "String",
			"metadata": {
				"description": "Account name for Azure DevOps VSTS."
			}
		},
		"TeamProject": {
			"type": "String",
			"metadata": {
				"description": "Account name for Azure DevOps VSTS."
			}
		},
		"DeploymentGroup": {
			"type": "String",
			"metadata": {
				"description": "Account name for Azure DevOps VSTS."
			}
		},
		"Tags": {
			"defaultValue": [],
			"type": "Array",
			"metadata": {
				"description": "Account name for Azure DevOps VSTS."
			}
		},
		"PATToken": {
			"type": "SecureString",
			"metadata": {
				"description": "Account name for Azure DevOps VSTS."
			}
		},
		"applicationGateways_appgateway_name": {
			"defaultValue": "appgateway",
			"type": "String"
		},
		"virtualNetworks_applicatiepoortvnet_externalid": {
			"defaultValue": "/subscriptions/b8f93236-b637-4607-84ca-09c6f1b13f9d/resourceGroups/JakobijnStrobbe/providers/Microsoft.Network/virtualNetworks/applicatiepoortvnet",
			"type": "String"
		},
		"publicIPAddresses_mooi_externalid": {
			"defaultValue": "/subscriptions/b8f93236-b637-4607-84ca-09c6f1b13f9d/resourceGroups/JakobijnStrobbe/providers/Microsoft.Network/publicIPAddresses/mooi",
			"type": "String"
		},
		"dnsNameForPublicIP": {
			"type": "string",
			"metadata": {
				"description": "Unique DNS Name for the Public IP used to access the Virtual Machine."
			}
		},
		"vmSize": {
			"type": "string",
			"defaultValue": "Standard_B1ms",
			"metadata": {
				"description": "VM size for the Docker host."
			}
		},
		"ubuntuOSVersion": {
			"type": "string",
			"defaultValue": "18.04-LTS",
			"metadata": {
				"description": "The Ubuntu version for deploying the Docker containers. This will pick a fully patched image of this given Ubuntu version. Allowed values: 14.04.4-LTS, 15.10, 16.04.0-LTS"
			},
			"allowedValues": [
				"14.04.4-LTS",
				"15.10",
				"16.04.0-LTS",
				"18.04-LTS"
			]
		},
		"location": {
			"type": "string",
			"defaultValue": "[resourceGroup().location]",
			"metadata": {
				"description": "Location for all resources."
			}
		},
		"authenticationType": {
			"type": "string",
			"defaultValue": "sshPublicKey",
			"allowedValues": [
				"sshPublicKey",
				"password"
			],
			"metadata": {
				"description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
			}
		},
		"adminPasswordOrKey": {
			"type": "securestring",
			"metadata": {
				"description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
			}
		}
	},
	"variables": {
		"imagePublisher": "Canonical",
		"imageOffer": "UbuntuServer",
		"ubuntuOSVersion": "16.04.0-LTS",
		"OSDiskName": "osdiskfordockersimple",
		"nsgName": "myNSG",
		"nicName": "myVMNic",
		"extensionName": "DockerExtension",
		"addressPrefix": "10.0.0.0/16",
		"subnetName": "Subnet",
		"subnetPrefix": "10.0.0.0/24",
		"diskStorageType": "Standard_LRS",
		"publicIPAddressName": "myPublicIPD",
		"publicIPAddressType": "Dynamic",
		"vmStorageAccountContainerName": "vhds",
		"storageAccountType": "Standard_LRS",
		"vmName": "MyDockerVM",
		"vmSize": "Standard_B1ms",
		"virtualNetworkName": "MyVNETD",
		"nsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('nsgName'))]",
		"trafficManagerName": "trafficmanagerjakobeanstra1",
		"subnetRef": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetName'))]",
		"linuxConfiguration": {
			"disablePasswordAuthentication": true,
			"ssh": {
				"publicKeys": [
					{
						"path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
						"keyData": "[parameters('adminPasswordOrKey')]"
					}
				]
			}
		}
	},
	"resources": [
		{
			"apiVersion": "2018-04-01",
			"name": "trafficmanagerjakobeanstra1",
			"location": "global",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
			],
			"properties": {
				"profileStatus": "enabled",
				"trafficRoutingMethod": "Geographic",
				"dnsConfig": {
					"relativeName": "trafficmanagerjakobeanstra1",
					"ttl": "60"
				},
				"monitorConfig": {
					"profileMonitorStatus": "Degraded",
					"protocol": "HTTP",
					"port": "80",
					"path": "/",
					"intervalInSeconds": "30",
					"timeoutInSeconds": "10",
					"toleratedNumberOfFailures": "3"
				},
				"endpoints": [
					{
						"name": "myVMNic",
						"type": "Microsoft.Network/trafficManagerProfiles/azureEndpoints",
						"properties": {
							"targetResourceId": "[resourceId ('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
							"endpointStatus": "Enabled",
							"weight": "1",
							"priority": "1",
							"endpointMonitorStatus": "Degraded",
							"geoMapping": [
								"WORLD"
							]
						}
					}
				],
				"trafficViewEnrollmentStatus": "Disabled"
			},
			"tags": {},
			"type": "Microsoft.Network/trafficmanagerprofiles"
		},
		{
			"apiVersion": "2019-08-01",
			"dependsOn": [
				"[concat('Microsoft.Network/trafficManagerProfiles/', variables('trafficManagerName'))]"
			],
			"location": "westeurope",
			"name": "[parameters('applicationGateways_appgateway_name')]",
			"properties": {
				"sku": {
					"name": "Standard_v2",
					"tier": "Standard_v2"
				},
				"gatewayIPConfigurations": [
					{
						"name": "appGatewayIpConfig",
						"properties": {
							"subnet": {
								"id": "[concat(parameters('virtualNetworks_applicatiepoortvnet_externalid'), '/subnets/default')]"
							}
						}
					}
				],
				"sslCertificates": [],
				"trustedRootCertificates": [],
				"frontendIPConfigurations": [
					{
						"name": "appGwPublicFrontendIp",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[parameters('publicIPAddresses_mooi_externalid')]"
							}
						}
					}
				],
				"frontendPorts": [
					{
						"name": "port_80",
						"properties": {
							"port": 80
						}
					}
				],
				"backendAddressPools": [
					{
						"name": "sjoerdenjako",
						"properties": {
							"backendAddresses": [
								{
									"fqdn": "trafficmanagerjakobeanstra1"
								}
							]
						}
					}
				],
				"backendHttpSettingsCollection": [
					{
						"name": "http",
						"properties": {
							"port": 80,
							"protocol": "Http",
							"cookieBasedAffinity": "Disabled",
							"pickHostNameFromBackendAddress": false,
							"requestTimeout": 20
						}
					}
				],
				"httpListeners": [
					{
						"name": "luisteraar",
						"properties": {
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGateways_appgateway_name')), '/frontendIPConfigurations/appGwPublicFrontendIp')]"
							},
							"frontendPort": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGateways_appgateway_name')), '/frontendPorts/port_80')]"
							},
							"protocol": "Http",
							"requireServerNameIndication": false
						}
					}
				],
				"urlPathMaps": [],
				"requestRoutingRules": [
					{
						"name": "vluchtregel",
						"properties": {
							"ruleType": "Basic",
							"httpListener": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGateways_appgateway_name')), '/httpListeners/luisteraar')]"
							},
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGateways_appgateway_name')), '/backendAddressPools/sjoerdenjako')]"
							},
							"backendHttpSettings": {
								"id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('applicationGateways_appgateway_name')), '/backendHttpSettingsCollection/http')]"
							}
						}
					}
				],
				"probes": [],
				"rewriteRuleSets": [],
				"redirectConfigurations": [],
				"enableHttp2": false,
				"autoscaleConfiguration": {
					"minCapacity": 0,
					"maxCapacity": 10
				}
			},
			"type": "Microsoft.Network/applicationGateways"
		},
		{
			"type": "Microsoft.Storage/storageAccounts",
			"apiVersion": "2015-05-01-preview",
			"name": "[parameters('newStorageAccountName')]",
			"location": "[parameters('location')]",
			"properties": {
				"accountType": "[variables('storageAccountType')]"
			}
		},
		{
			"type": "Microsoft.Network/publicIPAddresses",
			"apiVersion": "2019-04-01",
			"name": "[variables('publicIPAddressName')]",
			"location": "[parameters('location')]",
			"sku": { "name": "Standard" },
			"properties": {
				"publicIPAllocationMethod": "Static",
				"dnsSettings": {
					"domainNameLabel": "[parameters('dnsNameForPublicIP')]"
				}
			}
		},
		{
			"type": "Microsoft.Network/virtualNetworks",
			"apiVersion": "2015-05-01-preview",
			"name": "[variables('virtualNetworkName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[variables('nsgID')]"
			],
			"properties": {
				"addressSpace": {
					"addressPrefixes": [
						"[variables('addressPrefix')]"
					]
				},
				"subnets": [
					{
						"name": "[variables('subnetName')]",
						"properties": {
							"addressPrefix": "[variables('subnetPrefix')]",
							"networkSecurityGroup": {
								"id": "[variables('nsgID')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkInterfaces",
			"apiVersion": "2015-05-01-preview",
			"name": "[variables('nicName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
				"[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
			],
			"properties": {
				"ipConfigurations": [
					{
						"name": "ipconfig1",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"publicIPAddress": {
								"id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
							},
							"subnet": {
								"id": "[variables('subnetRef')]"
							}
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Network/networkSecurityGroups",
			"apiVersion": "2015-05-01-preview",
			"name": "[variables('nsgName')]",
			"location": "[parameters('location')]",
			"properties": {
				"securityRules": [
					{
						"name": "http",
						"properties": {
							"description": "Allow HTTP",
							"protocol": "*",
							"sourcePortRange": "*",
							"destinationPortRange": "5000",
							"sourceAddressPrefix": "*",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 300,
							"direction": "Inbound"
						}
					},
					{
						"name": "ssh",
						"properties": {
							"description": "Allow SSH",
							"protocol": "Tcp",
							"sourcePortRange": "*",
							"destinationPortRange": "22",
							"sourceAddressPrefix": "Internet",
							"destinationAddressPrefix": "*",
							"access": "Allow",
							"priority": 110,
							"direction": "Inbound"
						}
					}
				]
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines",
			"apiVersion": "2017-03-30",
			"name": "[variables('vmName')]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Storage/storageAccounts/', parameters('newStorageAccountName'))]",
				"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
			],
			"properties": {
				"hardwareProfile": {
					"vmSize": "[variables('vmSize')]"
				},
				"osProfile": {
					"computerName": "[variables('vmName')]",
					"adminUsername": "[parameters('adminUsername')]",
					"adminPassword": "[parameters('adminPasswordOrKey')]",
					"linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
				},
				"storageProfile": {
          "imageReference": {
            "publisher": "[variables('imagePublisher')]",
            "offer": "[variables('imageOffer')]",
            "sku": "[variables('ubuntuOSVersion')]",
            "version": "latest"
          },
					"osDisk": {
						"name": "[concat(variables('vmName'),'_OSDisk')]",
						"caching": "ReadWrite",
						"createOption": "FromImage"
					}
				},
				"networkProfile": {
					"networkInterfaces": [
						{
							"id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
						}
					]
				}
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"apiVersion": "2015-06-15",
			"name": "[concat(variables('vmName'),'/TeamServicesAgent')]",
			"location": "[parameters('location')]",
      "dependsOn": [ 
				"[resourceId('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
			],
			"properties": {
				"publisher": "Microsoft.VisualStudio.Services",
				"type": "TeamServicesAgentLinux",
				"typeHandlerVersion": "1.0",
				"autoUpgradeMinorVersion": true,
        "settings": {
          "VSTSAccountName": "[parameters('VSTSAccountName')]",
          "TeamProject": "[parameters('TeamProject')]",
          "DeploymentGroup": "[parameters('DeploymentGroup')]",
          "AgentName": "[variables('vmName')]",
          "Tags": "[parameters('Tags')]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines/extensions', variables('vmName'), variables('extensionName'))]"
          ]
        },
        "protectedSettings": {
          "PATToken": "[parameters('PATToken')]",
        }
			}
		},
		{
			"type": "Microsoft.Compute/virtualMachines/extensions",
			"apiVersion": "2019-07-01",
			"name": "[concat(variables('vmName'),'/', variables('extensionName'))]",
			"location": "[parameters('location')]",
			"dependsOn": [
				"[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
			],
			"properties": {
				"publisher": "Microsoft.Azure.Extensions",
				"type": "DockerExtension",
				"typeHandlerVersion": "1.1",
				"autoUpgradeMinorVersion": true,
				"settings": {
					"docker": {
						"port": "2375",
						"options": [
							"-D"
						]
					}
				}
			}
		}
	]
	}